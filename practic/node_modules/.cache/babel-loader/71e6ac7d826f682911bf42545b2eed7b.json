{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkoroteev/dev/minin_course/minin_course_components/src/containers/QuizCreator/QuizCreator.js\";\nimport React, { Component } from 'react';\nimport styles from './QuizCreator.module.css';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport Select from '../../components/UI/Select/Select';\nimport { createControl, validate, validateForm } from '../../form/formFramework';\nimport axios from 'axios';\nimport { logDOM } from '@testing-library/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction createOptionControl(number) {\n  return createControl({\n    label: `Вариант ${number}`,\n    errorMessage: 'Значение не может быть пустым',\n    id: number\n  }, {\n    required: true\n  });\n}\n\nfunction createFormControls() {\n  return {\n    title: createControl({\n      label: 'Имя теста',\n      errorMessage: '* Данное поле обязательно для заполнения!'\n    }, {\n      required: true\n    }),\n    question: createControl({\n      label: 'Введите вопрос',\n      errorMessage: 'Вопрос не может быть пустым'\n    }, {\n      required: true\n    }),\n    option1: createOptionControl(1),\n    option2: createOptionControl(2),\n    option3: createOptionControl(3),\n    option4: createOptionControl(4)\n  };\n}\n\nexport default class QuizCreator extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      quiz: [],\n      isFormValid: false,\n      rightAnswerId: 1,\n      formControls: createFormControls()\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n    };\n\n    this.addQuestionHandler = event => {\n      // TODO: Разобрать данную функцию!!!\n      event.preventDefault();\n      const quiz = this.state.quiz.concat();\n      console.log(quiz);\n      const index = quiz.length + 1;\n      const {\n        title,\n        question,\n        option1,\n        option2,\n        option3,\n        option4\n      } = this.state.formControls;\n      const questionItem = {\n        title: quiz[0].title ? quiz[0].title : this.state.formControls.title.value,\n        question: this.state.formControls.question.value,\n        id: index,\n        rightAnswerId: this.state.rightAnswerId,\n        answers: [{\n          text: option1.value,\n          id: option1.id\n        }, {\n          text: option2.value,\n          id: option2.id\n        }, {\n          text: option3.value,\n          id: option3.id\n        }, {\n          text: option4.value,\n          id: option4.id\n        }]\n      };\n      quiz.push(questionItem);\n      this.setState({\n        quiz,\n        isFormValid: false,\n        rightAnswerId: 1,\n        formControls: createFormControls()\n      });\n    };\n\n    this.createQuizHandler = async event => {\n      try {\n        await axios.post('https://react-quiz-f412a-default-rtdb.firebaseio.com/quizes.json', this.state.quiz);\n        this.setState({\n          quiz: [],\n          isFormValid: false,\n          rightAnswerId: 1,\n          formControls: createFormControls()\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.changeHandler = (value, controlName) => {\n      const formControls = { ...this.state.formControls\n      };\n      const control = { ...formControls[controlName]\n      };\n      control.touched = true;\n      control.value = value;\n      control.valid = validate(control.value, control.validation);\n      formControls[controlName] = control;\n      this.setState({\n        formControls,\n        isFormValid: validateForm(formControls)\n      });\n    };\n\n    this.selectChangeHandler = event => {\n      this.setState({\n        rightAnswerId: +event.target.value\n      });\n    };\n  }\n\n  renderControls() {\n    return Object.keys(this.state.formControls).map((controlName, index) => {\n      const control = this.state.formControls[controlName];\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          label: control.label,\n          value: control.value,\n          valid: control.valid,\n          shouldValidate: !!control.validation,\n          touched: control.touched,\n          errorMessage: control.errorMessage,\n          onChange: event => this.changeHandler(event.target.value, controlName)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), index === 1 ? /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 36\n        }, this) : null]\n      }, void 0, true);\n    });\n  }\n\n  render() {\n    const select = /*#__PURE__*/_jsxDEV(Select, {\n      label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0440\\u0430\\u0432\\u0438\\u043B\\u044C\\u043D\\u044B\\u0439 \\u043E\\u0442\\u0432\\u0435\\u0442\",\n      value: this.state.rightAnswerId,\n      onChange: this.selectChangeHandler,\n      options: [{\n        text: 1,\n        value: 1\n      }, {\n        text: 2,\n        value: 2\n      }, {\n        text: 3,\n        value: 3\n      }, {\n        text: 4,\n        value: 4\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 24\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.QuizCreator,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u0441\\u0442\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.submitHandler,\n          children: [this.renderControls(), select, /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            onClick: this.addQuestionHandler,\n            disabled: !this.state.isFormValid,\n            children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"success\",\n            onClick: this.createQuizHandler,\n            disabled: this.state.quiz.length === 0,\n            children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0442\\u0435\\u0441\\u0442\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/kirillkoroteev/dev/minin_course/minin_course_components/src/containers/QuizCreator/QuizCreator.js"],"names":["React","Component","styles","Button","Input","Select","createControl","validate","validateForm","axios","logDOM","createOptionControl","number","label","errorMessage","id","required","createFormControls","title","question","option1","option2","option3","option4","QuizCreator","state","quiz","isFormValid","rightAnswerId","formControls","submitHandler","event","preventDefault","addQuestionHandler","concat","console","log","index","length","questionItem","value","answers","text","push","setState","createQuizHandler","post","e","changeHandler","controlName","control","touched","valid","validation","selectChangeHandler","target","renderControls","Object","keys","map","render","select"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,SAAQC,aAAR,EAAuBC,QAAvB,EAAiCC,YAAjC,QAAoD,0BAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,wBAArB;;;;AAEA,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;AACjC,SAAON,aAAa,CAAC;AACjBO,IAAAA,KAAK,EAAG,WAAUD,MAAO,EADR;AAEjBE,IAAAA,YAAY,EAAE,+BAFG;AAGjBC,IAAAA,EAAE,EAAEH;AAHa,GAAD,EAIjB;AAACI,IAAAA,QAAQ,EAAE;AAAX,GAJiB,CAApB;AAKH;;AAED,SAASC,kBAAT,GAA8B;AAC1B,SAAO;AACHC,IAAAA,KAAK,EAAEZ,aAAa,CAAC;AACjBO,MAAAA,KAAK,EAAE,WADU;AAEjBC,MAAAA,YAAY,EAAE;AAFG,KAAD,EAGjB;AAACE,MAAAA,QAAQ,EAAE;AAAX,KAHiB,CADjB;AAKHG,IAAAA,QAAQ,EAAEb,aAAa,CAAC;AACpBO,MAAAA,KAAK,EAAE,gBADa;AAEpBC,MAAAA,YAAY,EAAE;AAFM,KAAD,EAGpB;AAACE,MAAAA,QAAQ,EAAE;AAAX,KAHoB,CALpB;AASHI,IAAAA,OAAO,EAAET,mBAAmB,CAAC,CAAD,CATzB;AAUHU,IAAAA,OAAO,EAAEV,mBAAmB,CAAC,CAAD,CAVzB;AAWHW,IAAAA,OAAO,EAAEX,mBAAmB,CAAC,CAAD,CAXzB;AAYHY,IAAAA,OAAO,EAAEZ,mBAAmB,CAAC,CAAD;AAZzB,GAAP;AAcH;;AAED,eAAe,MAAMa,WAAN,SAA0BvB,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAC/CwB,KAD+C,GACvC;AACJC,MAAAA,IAAI,EAAE,EADF;AAEJC,MAAAA,WAAW,EAAE,KAFT;AAGJC,MAAAA,aAAa,EAAE,CAHX;AAIJC,MAAAA,YAAY,EAAEZ,kBAAkB;AAJ5B,KADuC;;AAAA,SAQ/Ca,aAR+C,GAQ/BC,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACC,cAAN;AACH,KAV8C;;AAAA,SAY/CC,kBAZ+C,GAY1BF,KAAK,IAAI;AAC1B;AACAA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAMN,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBQ,MAAhB,EAAb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACA,YAAMW,KAAK,GAAGX,IAAI,CAACY,MAAL,GAAc,CAA5B;AAEA,YAAM;AAACpB,QAAAA,KAAD;AAAQC,QAAAA,QAAR;AAAkBC,QAAAA,OAAlB;AAA2BC,QAAAA,OAA3B;AAAoCC,QAAAA,OAApC;AAA6CC,QAAAA;AAA7C,UAAwD,KAAKE,KAAL,CAAWI,YAAzE;AAEA,YAAMU,YAAY,GAAG;AACjBrB,QAAAA,KAAK,EAAEQ,IAAI,CAAC,CAAD,CAAJ,CAAQR,KAAR,GAAgBQ,IAAI,CAAC,CAAD,CAAJ,CAAQR,KAAxB,GAAgC,KAAKO,KAAL,CAAWI,YAAX,CAAwBX,KAAxB,CAA8BsB,KADpD;AAEjBrB,QAAAA,QAAQ,EAAE,KAAKM,KAAL,CAAWI,YAAX,CAAwBV,QAAxB,CAAiCqB,KAF1B;AAGjBzB,QAAAA,EAAE,EAAEsB,KAHa;AAIjBT,QAAAA,aAAa,EAAE,KAAKH,KAAL,CAAWG,aAJT;AAKjBa,QAAAA,OAAO,EAAE,CACL;AAAEC,UAAAA,IAAI,EAAEtB,OAAO,CAACoB,KAAhB;AAAuBzB,UAAAA,EAAE,EAAEK,OAAO,CAACL;AAAnC,SADK,EAEL;AAAE2B,UAAAA,IAAI,EAAErB,OAAO,CAACmB,KAAhB;AAAuBzB,UAAAA,EAAE,EAAEM,OAAO,CAACN;AAAnC,SAFK,EAGL;AAAE2B,UAAAA,IAAI,EAAEpB,OAAO,CAACkB,KAAhB;AAAuBzB,UAAAA,EAAE,EAAEO,OAAO,CAACP;AAAnC,SAHK,EAIL;AAAE2B,UAAAA,IAAI,EAAEnB,OAAO,CAACiB,KAAhB;AAAuBzB,UAAAA,EAAE,EAAEQ,OAAO,CAACR;AAAnC,SAJK;AALQ,OAArB;AAaAW,MAAAA,IAAI,CAACiB,IAAL,CAAUJ,YAAV;AAEA,WAAKK,QAAL,CAAc;AACVlB,QAAAA,IADU;AAEVC,QAAAA,WAAW,EAAE,KAFH;AAGVC,QAAAA,aAAa,EAAE,CAHL;AAIVC,QAAAA,YAAY,EAAEZ,kBAAkB;AAJtB,OAAd;AAMH,KA3C8C;;AAAA,SA6C/C4B,iBA7C+C,GA6C3B,MAAMd,KAAN,IAAe;AAC/B,UAAI;AACA,cAAMtB,KAAK,CAACqC,IAAN,CAAW,kEAAX,EAA+E,KAAKrB,KAAL,CAAWC,IAA1F,CAAN;AAEA,aAAKkB,QAAL,CAAc;AACVlB,UAAAA,IAAI,EAAE,EADI;AAEVC,UAAAA,WAAW,EAAE,KAFH;AAGVC,UAAAA,aAAa,EAAE,CAHL;AAIVC,UAAAA,YAAY,EAAEZ,kBAAkB;AAJtB,SAAd;AAMH,OATD,CASE,OAAO8B,CAAP,EAAU;AACRZ,QAAAA,OAAO,CAACC,GAAR,CAAYW,CAAZ;AACH;AACJ,KA1D8C;;AAAA,SAqE/CC,aArE+C,GAqE/B,CAACR,KAAD,EAAQS,WAAR,KAAwB;AACpC,YAAMpB,YAAY,GAAG,EAAE,GAAG,KAAKJ,KAAL,CAAWI;AAAhB,OAArB;AACA,YAAMqB,OAAO,GAAG,EAAE,GAAGrB,YAAY,CAACoB,WAAD;AAAjB,OAAhB;AAEAC,MAAAA,OAAO,CAACC,OAAR,GAAkB,IAAlB;AACAD,MAAAA,OAAO,CAACV,KAAR,GAAgBA,KAAhB;AACAU,MAAAA,OAAO,CAACE,KAAR,GAAgB7C,QAAQ,CAAC2C,OAAO,CAACV,KAAT,EAAgBU,OAAO,CAACG,UAAxB,CAAxB;AAEAxB,MAAAA,YAAY,CAACoB,WAAD,CAAZ,GAA4BC,OAA5B;AAEA,WAAKN,QAAL,CAAc;AACVf,QAAAA,YADU;AAEVF,QAAAA,WAAW,EAAEnB,YAAY,CAACqB,YAAD;AAFf,OAAd;AAKH,KApF8C;;AAAA,SA6G/CyB,mBA7G+C,GA6GzBvB,KAAK,IAAI;AAC3B,WAAKa,QAAL,CAAc;AACVhB,QAAAA,aAAa,EAAE,CAACG,KAAK,CAACwB,MAAN,CAAaf;AADnB,OAAd;AAGH,KAjH8C;AAAA;;AAsF/CgB,EAAAA,cAAc,GAAG;AACb,WAAOC,MAAM,CAACC,IAAP,CAAY,KAAKjC,KAAL,CAAWI,YAAvB,EACJ8B,GADI,CACA,CAACV,WAAD,EAAcZ,KAAd,KAAwB;AAC3B,YAAMa,OAAO,GAAG,KAAKzB,KAAL,CAAWI,YAAX,CAAwBoB,WAAxB,CAAhB;AAEE,0BACE;AAAA,gCACI,QAAC,KAAD;AAEE,UAAA,KAAK,EAAEC,OAAO,CAACrC,KAFjB;AAGE,UAAA,KAAK,EAAEqC,OAAO,CAACV,KAHjB;AAIE,UAAA,KAAK,EAAEU,OAAO,CAACE,KAJjB;AAKE,UAAA,cAAc,EAAE,CAAC,CAACF,OAAO,CAACG,UAL5B;AAME,UAAA,OAAO,EAAEH,OAAO,CAACC,OANnB;AAOE,UAAA,YAAY,EAAED,OAAO,CAACpC,YAPxB;AAQE,UAAA,QAAQ,EAAEiB,KAAK,IAAI,KAAKiB,aAAL,CAAmBjB,KAAK,CAACwB,MAAN,CAAaf,KAAhC,EAAuCS,WAAvC;AARrB,WACOZ,KADP;AAAA;AAAA;AAAA;AAAA,gBADJ,EAWKA,KAAK,KAAK,CAAV,gBAAc;AAAA;AAAA;AAAA;AAAA,gBAAd,GAAsB,IAX3B;AAAA,sBADF;AAeH,KAnBI,CAAP;AAoBH;;AAQDuB,EAAAA,MAAM,GAAG;AACL,UAAMC,MAAM,gBAAG,QAAC,MAAD;AACX,MAAA,KAAK,EAAC,8IADK;AAEX,MAAA,KAAK,EAAE,KAAKpC,KAAL,CAAWG,aAFP;AAGX,MAAA,QAAQ,EAAE,KAAK0B,mBAHJ;AAIX,MAAA,OAAO,EAAE,CACL;AAACZ,QAAAA,IAAI,EAAE,CAAP;AAAUF,QAAAA,KAAK,EAAE;AAAjB,OADK,EAEL;AAACE,QAAAA,IAAI,EAAE,CAAP;AAAUF,QAAAA,KAAK,EAAE;AAAjB,OAFK,EAGL;AAACE,QAAAA,IAAI,EAAE,CAAP;AAAUF,QAAAA,KAAK,EAAE;AAAjB,OAHK,EAIL;AAACE,QAAAA,IAAI,EAAE,CAAP;AAAUF,QAAAA,KAAK,EAAE;AAAjB,OAJK;AAJE;AAAA;AAAA;AAAA;AAAA,YAAf;;AAYA,wBACE;AAAK,MAAA,SAAS,EAAEtC,MAAM,CAACsB,WAAvB;AAAA,6BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAGI;AAAM,UAAA,QAAQ,EAAE,KAAKM,aAArB;AAAA,qBAEM,KAAK0B,cAAL,EAFN,EAIMK,MAJN,eAMI,QAAC,MAAD;AACE,YAAA,IAAI,EAAC,SADP;AAEE,YAAA,OAAO,EAAE,KAAK5B,kBAFhB;AAGE,YAAA,QAAQ,EAAE,CAAC,KAAKR,KAAL,CAAWE,WAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ,eAaI,QAAC,MAAD;AACE,YAAA,IAAI,EAAC,SADP;AAEE,YAAA,OAAO,EAAE,KAAKkB,iBAFhB;AAGE,YAAA,QAAQ,EAAE,KAAKpB,KAAL,CAAWC,IAAX,CAAgBY,MAAhB,KAA2B,CAHvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADF;AA6BH;;AA7J8C","sourcesContent":["import React, {Component} from 'react'\nimport styles from './QuizCreator.module.css'\nimport Button from '../../components/UI/Button/Button'\nimport Input from '../../components/UI/Input/Input'\nimport Select from '../../components/UI/Select/Select'\nimport {createControl, validate, validateForm} from '../../form/formFramework'\nimport axios from 'axios'\nimport {logDOM} from '@testing-library/react'\n\nfunction createOptionControl(number) {\n    return createControl({\n        label: `Вариант ${number}`,\n        errorMessage: 'Значение не может быть пустым',\n        id: number,\n    }, {required: true})\n}\n\nfunction createFormControls() {\n    return {\n        title: createControl({\n            label: 'Имя теста',\n            errorMessage: '* Данное поле обязательно для заполнения!'\n        }, {required: true}),\n        question: createControl({\n            label: 'Введите вопрос',\n            errorMessage: 'Вопрос не может быть пустым'\n        }, {required: true}),\n        option1: createOptionControl(1),\n        option2: createOptionControl(2),\n        option3: createOptionControl(3),\n        option4: createOptionControl(4),\n    }\n}\n\nexport default class QuizCreator extends Component {\n    state = {\n        quiz: [],\n        isFormValid: false,\n        rightAnswerId: 1,\n        formControls: createFormControls()\n    }\n\n    submitHandler = event => {\n        event.preventDefault()\n    }\n\n    addQuestionHandler = event => {\n        // TODO: Разобрать данную функцию!!!\n        event.preventDefault()\n\n        const quiz = this.state.quiz.concat()\n        console.log(quiz)\n        const index = quiz.length + 1\n\n        const {title, question, option1, option2, option3, option4} = this.state.formControls\n\n        const questionItem = {\n            title: quiz[0].title ? quiz[0].title : this.state.formControls.title.value,\n            question: this.state.formControls.question.value,\n            id: index,\n            rightAnswerId: this.state.rightAnswerId,\n            answers: [\n                { text: option1.value, id: option1.id },\n                { text: option2.value, id: option2.id },\n                { text: option3.value, id: option3.id },\n                { text: option4.value, id: option4.id },\n            ]\n        }\n\n        quiz.push(questionItem)\n\n        this.setState({\n            quiz,\n            isFormValid: false,\n            rightAnswerId: 1,\n            formControls: createFormControls()\n        })\n    }\n\n    createQuizHandler = async event => {\n        try {\n            await axios.post('https://react-quiz-f412a-default-rtdb.firebaseio.com/quizes.json', this.state.quiz)\n\n            this.setState({\n                quiz: [],\n                isFormValid: false,\n                rightAnswerId: 1,\n                formControls: createFormControls()\n              })\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    // createQuizHandler = event => {\n    //     event.preventDefault()\n    //\n    //     axios.post('https://react-quiz-f412a-default-rtdb.firebaseio.com/quizes.json', this.state.quiz)\n    //       .then(response => {\n    //           console.log(response)\n    //       }, error => console.log(error))\n    // }\n\n    changeHandler = (value, controlName) => {\n        const formControls = { ...this.state.formControls }\n        const control = { ...formControls[controlName] }\n\n        control.touched = true\n        control.value = value\n        control.valid = validate(control.value, control.validation)\n\n        formControls[controlName] = control\n\n        this.setState({\n            formControls,\n            isFormValid: validateForm(formControls)\n        })\n\n    }\n\n    renderControls() {\n        return Object.keys(this.state.formControls)\n          .map((controlName, index) => {\n            const control = this.state.formControls[controlName]\n\n              return (\n                <>\n                    <Input\n                      key={index}\n                      label={control.label}\n                      value={control.value}\n                      valid={control.valid}\n                      shouldValidate={!!control.validation}\n                      touched={control.touched}\n                      errorMessage={control.errorMessage}\n                      onChange={event => this.changeHandler(event.target.value, controlName)}\n                    />\n                    {index === 1 ? <hr/> : null}\n                </>\n              )\n          })\n    }\n\n    selectChangeHandler = event => {\n        this.setState({\n            rightAnswerId: +event.target.value\n        })\n    }\n\n    render() {\n        const select = <Select\n            label=\"Выберите правильный ответ\"\n            value={this.state.rightAnswerId}\n            onChange={this.selectChangeHandler}\n            options={[\n                {text: 1, value: 1},\n                {text: 2, value: 2},\n                {text: 3, value: 3},\n                {text: 4, value: 4},\n            ]}\n        />\n\n        return (\n          <div className={styles.QuizCreator}>\n              <div>\n                  <h1>Создание теста</h1>\n\n                  <form onSubmit={this.submitHandler}>\n\n                      { this.renderControls() }\n\n                      { select }\n\n                      <Button\n                        type=\"primary\"\n                        onClick={this.addQuestionHandler}\n                        disabled={!this.state.isFormValid}\n                      >\n                          Добавить вопрос\n                      </Button>\n                      <Button\n                        type=\"success\"\n                        onClick={this.createQuizHandler}\n                        disabled={this.state.quiz.length === 0}\n                      >\n                          Создать тест\n                      </Button>\n                  </form>\n              </div>\n          </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}